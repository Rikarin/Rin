func sleep(interval: TimeInterval) [
    if (Task.current !is null) {
        // wait for timer
    } else {
        .stdc.posix.usleep(interval.total!"usecs")
    }
}

task runMe() -> Task!int { // same as func but calling them perform internal __rin_runTask() conversion
    sleep(5.seconds) // Sleep just yield in tasks
    yield
    writeln("test")
    // This will run in another task
}


func main() -> int {
    runMe()
    runMe()
    runMe()
    
    return Task.runLoop()
}


// operator weight (), then as, then */%, then +-
unittest {
    let test = 42
    let aVar = test as ulong // This is the best, I think
    let aVar = cast(ulong)test
    let aVar = (ulong)test
    
    unsafe {
        var hdr = ptr as Header
        hdr.next = ((hdr as ulong) + Header.sizeof) as Header // This seems as clearest solution
        hdr.next = (hdr as ulong + Header.sizeof) as Header // Maybe should be used as this less clear solution?
        
        hdr.next = (Header)((ulong)hdr + Header.sizeof)
        hdr.next = cast(Header)(cast(ulong)hdr + Header.sizeof)
    }
}
